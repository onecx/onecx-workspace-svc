---
openapi: 3.0.3
info:
  title: tkit-portal-server API
  version: 4.4.0-SNAPSHOT
tags:
- name: adminUserInternal
- name: avatarV1
- name: feedbackV1
- name: imageV1
- name: menuItemsInternal
- name: microfrontendRegistrationInternal
- name: microfrontendV1
- name: portalImportRequestV1
- name: portalInternal
- name: portalItemsV1
- name: portalLegacy
- name: portalV1
- name: supportTicketV1
- name: themes
- name: userInfoV1
- name: userProfileV1
paths:
  /internal/portals:
    get:
      tags:
      - portalInternal
      description: Load all portals
      operationId: getAllPortals
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortalDTO'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    post:
      tags:
      - portalInternal
      description: Create new portal definition
      operationId: createNewPortal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortalDTO'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalDTO'
        "400":
          description: Bad request
          content:
            application/json: {}
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/search:
    get:
      tags:
      - portalInternal
      summary: Get portals by search criteria (name & theme)
      description: This operation searches portals by criteria.
      operationId: getPortals
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortalSearchCriteriaDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalDTO'
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
  /internal/portals/{portalId}:
    get:
      tags:
      - portalInternal
      description: Load a single portal
      operationId: getPortalByPortalId
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalDTO'
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    put:
      tags:
      - portalInternal
      description: Update portal definition
      operationId: updatePortal
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePortalDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalDTO'
        "400":
          description: Bad request
          content:
            application/json: {}
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
      - portalInternal
      description: Delete given portal
      operationId: deletePortal
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalDTO'
        "204":
          description: No Content
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/menuItems:
    get:
      tags:
      - menuItemsInternal
      description: Returns a list of portal menu items
      operationId: getPortalMenuItems
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItemListDTO'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    post:
      tags:
      - menuItemsInternal
      description: Add a new menu item to portal menu
      operationId: addMenuItemForPortal
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemDetailsDTO'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItemDetailsDTO'
        "400":
          description: Bad request
          content:
            application/json: {}
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
      - menuItemsInternal
      description: Delete all menu items in portal
      operationId: deleteAllMenuItemForPortal
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ok
          content:
            application/json: {}
        "204":
          description: No content
          content:
            application/json: {}
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    patch:
      tags:
      - menuItemsInternal
      description: Bulk update menu Items
      operationId: bulkPatchMenuItems
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MenuItemDetailsDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItemListDTO'
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/menuItems/tree:
    get:
      tags:
      - menuItemsInternal
      description: Fetch the menuItems of the portal in the tree structure
      operationId: getMenuStructureForPortalId
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortalMenuItemDTO'
        "401":
          description: Not authorized
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
  /internal/portals/{portalId}/menuItems/upload:
    put:
      tags:
      - menuItemsInternal
      description: Upload and overwrite menuStructure in portal
      operationId: uploadMenuStructure
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuStructureListDTO'
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/menuItems/{menuItemId}:
    get:
      tags:
      - menuItemsInternal
      description: Retrieve menu item detail info
      operationId: getMenuItemById
      parameters:
      - name: menuItemId
        in: path
        required: true
        schema:
          type: string
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItemDetailsDTO'
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
      - menuItemsInternal
      description: Delete a menuItem by the PortalId and the menuItemId
      operationId: deleteMenuItemById
      parameters:
      - name: menuItemId
        in: path
        required: true
        schema:
          type: string
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    patch:
      tags:
      - menuItemsInternal
      description: Update an existing menu item
      operationId: patchMenuItem
      parameters:
      - name: menuItemId
        in: path
        required: true
        schema:
          type: string
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemDetailsDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItemDetailsDTO'
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/microfrontendregistrations:
    post:
      tags:
      - microfrontendRegistrationInternal
      description: Assigns a microfrontend to this portal
      operationId: registerMicrofrontend
      parameters:
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MicrofrontendRegistrationRequestDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MicrofrontendRegistrationDTO'
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/microfrontendregistrations/{mfeRegId}:
    delete:
      tags:
      - microfrontendRegistrationInternal
      description: Removes microfrontend assignment to this portal
      operationId: deleteMicrofrontendRegistration
      parameters:
      - name: mfeRegId
        in: path
        required: true
        schema:
          type: string
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/themes:
    get:
      tags:
      - themes
      description: Return list of themes
      operationId: getThemes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ThemeDTO'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    post:
      tags:
      - themes
      description: Create new theme
      operationId: createNewTheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThemeDTO'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateThemeDTO'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/themes/id/{id}:
    get:
      tags:
      - themes
      description: Return theme by ID
      operationId: getThemeById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/themes/{id}:
    put:
      tags:
      - themes
      description: Update theme by ID
      operationId: updateTheme
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThemeDTO'
          text/plain:
            schema:
              $ref: '#/components/schemas/UpdateThemeDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
      - themes
      description: Delete theme by ID
      operationId: deleteTheme
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        "204":
          description: No Content
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDTO'
  /internal/themes/{name}:
    get:
      tags:
      - themes
      description: Load a single theme definition
      operationId: getThemeByThemeDefinitionName
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeDTO'
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
      deprecated: true
  /internal/userProfiles:
    get:
      tags:
      - adminUserInternal
      description: Get User Profiles by given criteria
      operationId: getUserProfiles
      parameters:
      - name: email
        in: query
        schema:
          type: string
      - name: firstName
        in: query
        schema:
          type: string
      - name: lastName
        in: query
        schema:
          type: string
      - name: userId
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserProfileDTO'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "401":
          description: Not Authorized
      security:
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
  /internal/userProfiles/settings/{userId}:
    patch:
      tags:
      - adminUserInternal
      description: Update Admin User Settings
      operationId: adminUpdateUserSettings
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountSettingsDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSettingsDTO'
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "401":
          description: Not Authorized
      security:
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
  /internal/userProfiles/{userId}:
    get:
      tags:
      - adminUserInternal
      description: Get User Profile by Id
      operationId: getUserProfileById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTO'
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "401":
          description: Not Authorized
      security:
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
    put:
      tags:
      - adminUserInternal
      description: Update Personal User Info By Admin
      operationId: updateUserPersonalInfo
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPersonDTO'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPersonDTO'
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "401":
          description: Not Authorized
      security:
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
    delete:
      tags:
      - adminUserInternal
      description: Delete user by given Id
      operationId: deleteUserById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "401":
          description: Not Authorized
      security:
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
  /legacy/menustructure/{portalId}/{applicationId}:
    get:
      tags:
      - portalLegacy
      description: Fetch the menuItems of the portal and application pair in the tree
        structure
      operationId: getMenuStructureForPortalIdAndApplicationId
      parameters:
      - name: applicationId
        in: path
        required: true
        schema:
          type: string
      - name: portalId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItemStructureDtoLegacy'
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MicrofrontendDTOv1'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MicrofrontendDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      deprecated: true
  /legacy/menustructure/{portalName}:
    get:
      tags:
      - portalLegacy
      description: Fetch the menuItems of the portal in the tree structure
      operationId: getMenuStructureForPortalName
      parameters:
      - name: portalName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItemStructureDtoLegacy'
        "401":
          description: Not authorized
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MicrofrontendDTOv1'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MicrofrontendDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      deprecated: true
  /v1/feedback/send:
    post:
      tags:
      - feedbackV1
      description: Send feedback for an app
      operationId: sendFeedbackV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackDTOv1'
      responses:
        "200":
          description: OK
        "403":
          description: Not authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/images:
    post:
      tags:
      - imageV1
      description: Upload Images
      operationId: uploadImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  format: binary
                  description: file data
                  type: string
                fileName:
                  type: string
            encoding:
              image:
                contentType: application/octet-stream
              fileName:
                contentType: text/plain
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageInfoDTOv1'
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
      security:
      - SecurityScheme:
        - onecx-portal-user
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-user
        - onecx-portal-admin
        - onecx-portal-super-admin
  /v1/images/{imageId}:
    get:
      tags:
      - imageV1
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageInfoDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme:
        - onecx-portal-user
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-user
        - onecx-portal-admin
        - onecx-portal-super-admin
    delete:
      tags:
      - imageV1
      description: Delete Image
      operationId: deleteImage
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
      security:
      - SecurityScheme:
        - onecx-portal-user
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-user
        - onecx-portal-admin
        - onecx-portal-super-admin
  /v1/microfrontends:
    get:
      tags:
      - microfrontendV1
      description: Returns a list of all microfrontends.
      operationId: getMicrofrontends
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MicrofrontendDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
    post:
      tags:
      - microfrontendV1
      description: Create microfrontend.
      operationId: createNewMicroFrontend
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMicrofrontendDTOv1'
          text/plain:
            schema:
              $ref: '#/components/schemas/CreateMicrofrontendDTOv1'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MicrofrontendDTOv1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
  /v1/microfrontends/{id}:
    get:
      tags:
      - microfrontendV1
      description: Returns a microfrontend by ID.
      operationId: getMicrofrontendById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MicrofrontendDTOv1'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
    put:
      tags:
      - microfrontendV1
      description: Creates or updates a microfrontend.
      operationId: updateMicrofrontend
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMicrofrontendDTOv1'
          text/plain:
            schema:
              $ref: '#/components/schemas/UpdateMicrofrontendDTOv1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                required:
                - remoteEntry
                - remoteName
                - exposedModule
                - displayName
                - moduleType
                - remoteBaseUrl
                type: object
                properties:
                  version:
                    format: int32
                    type: integer
                  creationDate:
                    $ref: '#/components/schemas/OffsetDateTime'
                  creationUser:
                    type: string
                  modificationDate:
                    $ref: '#/components/schemas/OffsetDateTime'
                  modificationUser:
                    type: string
                  id:
                    type: string
                  remoteEntry:
                    minLength: 2
                    type: string
                  remoteName:
                    minLength: 2
                    type: string
                  exposedModule:
                    minLength: 2
                    type: string
                  displayName:
                    minLength: 2
                    type: string
                  moduleType:
                    allOf:
                    - $ref: '#/components/schemas/ModuleTypeV1'
                    - minLength: 2
                  wcTagName:
                    type: string
                  appId:
                    type: string
                  appVersion:
                    type: string
                  note:
                    type: string
                  contact:
                    type: string
                  remoteBaseUrl:
                    minLength: 2
                    type: string
                  portals:
                    type: array
                    items:
                      $ref: '#/components/schemas/PortalIdentifierDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
    delete:
      tags:
      - microfrontendV1
      description: Delete microfrontend by ID when no portals are attached.
      operationId: deleteMicrofrontend
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MicrofrontendDTOv1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
  /v1/portalImportRequest:
    post:
      tags:
      - portalImportRequestV1
      description: Trigger portal import feature
      operationId: portalImportRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportRequestDTOv1'
      responses:
        "201":
          description: Import succeed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalDTOv1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "403":
          description: Not authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "401":
          description: Not Authorized
      security:
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
      - SecurityScheme:
        - onecx-portal-admin
        - onecx-portal-super-admin
  /v1/portalItems/search:
    get:
      tags:
      - portalItemsV1
      description: Returns a list of portal items matching query
      operationId: getPortalItemsByQuery
      parameters:
      - name: count
        in: query
        schema:
          format: int32
          type: integer
      - name: portal-name
        in: query
        schema:
          type: string
      - name: query
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchItemDTOv1'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      deprecated: true
  /v1/portals/current:
    get:
      tags:
      - portalV1
      description: "Load portal-, menu-, mfes- and theme-information by current Url"
      operationId: getPortalByUrl
      parameters:
      - name: url
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalDTOv1'
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/portals/{portalName}:
    get:
      tags:
      - portalV1
      description: Load a single portal
      operationId: getPortalV1
      parameters:
      - name: portalName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortalDTOv1'
        "403":
          description: Not authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/portals/{portalName}/menu:
    get:
      tags:
      - portalV1
      description: Fetch the menuItems of the portal in the tree structure
      operationId: getMenuStructureForPortalNameV1
      parameters:
      - name: portalName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortalMenuItemDTOv1'
        "401":
          description: Not authorized
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
  /v1/portals/{portalName}/permissionSyncRequest:
    post:
      tags:
      - portalV1
      description: Synchronize permission to apm
      operationId: synchronizePermissions
      parameters:
      - name: portalName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
        "403":
          description: Not authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/searchTemplates:
    post:
      tags:
      - portalV1
      summary: Creates the search template.
      description: Creates the search template.
      operationId: createSearchTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTemplateDTOv1'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTemplateDTOv1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/searchTemplates/default/{application}/{page}/{user}:
    get:
      tags:
      - portalV1
      summary: "Gets the default template for application, page and user."
      description: "The default template for the application, page and user is returned."
      operationId: getDefaultSearchTemplate
      parameters:
      - name: application
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: path
        required: true
        schema:
          type: string
      - name: user
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTemplateDTOv1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/searchTemplates/search/criteria:
    post:
      tags:
      - portalV1
      summary: Finds search templates by criteria.
      description: The search templates are found by search criteria.
      operationId: findBySearchCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTemplateSearchCriteria'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchTemplateDTOv1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/searchTemplates/{templateId}:
    get:
      tags:
      - portalV1
      summary: Finds search templates by it's id.
      description: Gets the search template by it's id.
      operationId: getSearchTemplateById
      parameters:
      - name: templateId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTemplateDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    put:
      tags:
      - portalV1
      summary: Updates the search template.
      description: Updates the search template.
      operationId: updateSearchTemplate
      parameters:
      - name: templateId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchTemplateDTOv1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchTemplateDTOv1'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
      - portalV1
      summary: Deletes the search template.
      description: Deletes the search template.
      operationId: deleteSearchTemplate
      parameters:
      - name: templateId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
          content:
            application/json: {}
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/supportTicket/send:
    post:
      tags:
      - supportTicketV1
      description: Send support Ticket for an app
      operationId: sendSupportTicketV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportTicketDTOv1'
      responses:
        "200":
          description: OK
        "403":
          description: Not authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/userInfo:
    get:
      tags:
      - userInfoV1
      description: Search for users
      operationId: searchUsers
      parameters:
      - name: q
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "400":
          description: Bad request
          content:
            text/plain: {}
      deprecated: true
  /v1/userInfo/avatarIds:
    get:
      tags:
      - userInfoV1
      description: Search for Avatar ids for selected users
      operationId: searchAvatar Ids
      parameters:
      - name: userId
        in: query
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "400":
          description: Bad request
          content:
            text/plain: {}
      deprecated: true
  /v1/userProfile/me:
    get:
      tags:
      - userProfileV1
      description: Load user profile by user Id
      operationId: getUserProfile
      parameters:
      - name: applicationIds
        in: query
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDTOv1'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
      - SecurityScheme: []
    delete:
      tags:
      - userProfileV1
      description: Delete current user
      operationId: deleteUserProfile
      responses:
        "204":
          description: No Content
        "403":
          description: Not Authorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/userProfile/me/avatar:
    get:
      tags:
      - avatarV1
      description: Get user avatar info
      operationId: getUserAvatarInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageInfoDTOv1'
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    put:
      tags:
      - avatarV1
      description: Upload user avatar
      operationId: uploadAvatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageInfoDTOv1'
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
      - avatarV1
      description: Delete user's avatar
      operationId: deleteUserAvatar
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/userProfile/me/avatar/{avatarId}:
    get:
      tags:
      - avatarV1
      parameters:
      - name: avatarId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageInfoDTOv1'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /v1/userProfile/me/change-password:
    put:
      tags:
      - userProfileV1
      summary: Reset Keycloak User's password
      description: The password of user registered in keycloak is set to the new one.
      operationId: resetKeycloakUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDTOv1'
      responses:
        "204":
          description: No content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
        "401":
          description: Not Authorized
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
      - SecurityScheme: []
  /v1/userProfile/me/preference:
    post:
      tags:
      - userProfileV1
      description: Store user's preference
      operationId: storeUserPreference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferencesDTOv1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferencesDTOv1'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      security:
      - SecurityScheme: []
      - SecurityScheme: []
  /v1/userProfile/me/preference/{preferenceId}:
    delete:
      tags:
      - userProfileV1
      description: Delete user's preference
      operationId: deleteUserPreference
      parameters:
      - name: preferenceId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferencesDTOv1'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      security:
      - SecurityScheme: []
      - SecurityScheme: []
    patch:
      tags:
      - userProfileV1
      description: Patch user's preference
      operationId: patchUserPreference
      parameters:
      - name: preferenceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferencesDTOv1'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      security:
      - SecurityScheme: []
      - SecurityScheme: []
  /v1/userProfile/me/preferences:
    get:
      tags:
      - userProfileV1
      description: Get user's preferences
      operationId: getUserPreferences
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PreferencesDTOv1'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      security:
      - SecurityScheme: []
      - SecurityScheme: []
  /v1/userProfile/me/settings:
    get:
      tags:
      - userProfileV1
      description: Get user's settings
      operationId: getUserSettings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSettingsDTOv1'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
        "403":
          description: Not Allowed
      security:
      - SecurityScheme: []
      - SecurityScheme: []
    patch:
      tags:
      - userProfileV1
      description: Update user's settings
      operationId: updateUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountSettingsDTOv1'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSettingsDTOv1'
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      security:
      - SecurityScheme: []
      - SecurityScheme: []
  /v1/userProfile/me/userPerson:
    get:
      tags:
      - userProfileV1
      description: Load user profile by user Id
      operationId: getUserPerson
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPersonDTOv1'
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      security:
      - SecurityScheme: []
      - SecurityScheme: []
    put:
      tags:
      - userProfileV1
      description: Update user person data
      operationId: updateUserPerson
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPersonDTOv1'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                description: URL of updated resource
                type: string
        "401":
          description: Unauthorized
        "403":
          description: Not Authorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestExceptionDTO'
      security:
      - SecurityScheme: []
      - SecurityScheme: []
components:
  schemas:
    AccountSettingsDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        privacySettings:
          allOf:
          - $ref: '#/components/schemas/PrivacySettingsDTO'
          - description: privacy settings of user profile
        localeAndTimeSettings:
          allOf:
          - $ref: '#/components/schemas/LocaleAndTimeSettingsDTO'
          - description: locale and time settings of user profile
        preferences:
          type: array
          items:
            $ref: '#/components/schemas/PreferencesDTO'
        notificationSettings:
          allOf:
          - $ref: '#/components/schemas/NotificationSettingsDTO'
          - description: notification settings of user profile
        layoutAndThemeSettings:
          allOf:
          - $ref: '#/components/schemas/LayoutAndThemeDTO'
          - description: layout and themes settings of user profile
    AccountSettingsDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        privacySettings:
          allOf:
          - $ref: '#/components/schemas/PrivacySettingsDTOv1'
          - description: privacy settings of user profile
        localeAndTimeSettings:
          allOf:
          - $ref: '#/components/schemas/LocaleAndTimeSettingsDTOv1'
          - description: locale and time settings of user profile
        notificationSettings:
          allOf:
          - $ref: '#/components/schemas/NotificationSettingsDTOv1'
          - description: notification settings of user profile
        layoutAndThemeSettings:
          allOf:
          - $ref: '#/components/schemas/LayoutAndThemeDTOv1'
          - description: layout and themes settings of user profile
    ColorScheme:
      enum:
      - AUTO
      - LIGHT
      - DARK
      type: string
    ColorSchemeV1:
      enum:
      - AUTO
      - LIGHT
      - DARK
      type: string
    CreateMicrofrontendDTOv1:
      required:
      - remoteEntry
      - remoteName
      - exposedModule
      - displayName
      - moduleType
      - remoteBaseUrl
      type: object
      properties:
        remoteEntry:
          minLength: 2
          type: string
        remoteName:
          minLength: 2
          type: string
        exposedModule:
          minLength: 2
          type: string
        displayName:
          minLength: 2
          type: string
        moduleType:
          allOf:
          - $ref: '#/components/schemas/ModuleTypeV1'
          - minLength: 2
        wcTagName:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        note:
          type: string
        contact:
          type: string
        remoteBaseUrl:
          minLength: 2
          type: string
    CreatePortalDTO:
      required:
      - portalName
      - themeName
      - baseUrl
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        portalName:
          minLength: 2
          type: string
        tenantId:
          type: string
        description:
          type: string
        themeName:
          minLength: 2
          type: string
        themeId:
          type: string
        homePage:
          type: string
        baseUrl:
          minLength: 2
          type: string
          nullable: false
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddressDTO'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SubjectLinkDTO'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistrationInputDTO'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          items:
            type: string
        logoUrl:
          type: string
    CreateThemeDTO:
      required:
      - name
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        name:
          minLength: 2
          type: string
        cssFile:
          type: string
        description:
          type: string
        assetsUrl:
          type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        previewImageUrl:
          type: string
        assetsUpdateDate:
          type: string
        properties:
          type: object
        portals:
          type: array
          items:
            $ref: '#/components/schemas/PortalIdentifierDTO'
    ErrorResponseDTO:
      type: object
      properties:
        key:
          type: string
        parameters:
          type: array
          items:
            type: string
        details:
          type: array
          items:
            type: string
    FeedbackDTOv1:
      type: object
      properties:
        appId:
          type: string
        userId:
          type: string
        rating:
          format: int32
          type: integer
        comment:
          type: string
    ImageInfoDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        userUploaded:
          description: flag whether Image was uploaded by user
          type: boolean
        lastUpdateTime:
          allOf:
          - $ref: '#/components/schemas/OffsetDateTime'
          - description: dateTime of last update
        imageUrl:
          type: string
          example: http://tkit-portal/data/afcc5d0d-6509-497a-8125-614f82b106ae
        smallImageUrl:
          type: string
          example: http://tkit-portal/data/afcc5d0d-6509-497a-8125-614f82asb106ae
    ImportRequestDTOv1:
      required:
      - portal
      type: object
      properties:
        synchronizePermissions:
          description: Whether menu permissions should be synced to APM after import
          type: boolean
        portal:
          allOf:
          - $ref: '#/components/schemas/PortalImportDTOv1'
          - description: Portal data to be imported
        menuItems:
          description: Menu Items structure imported with a portal
          type: array
          items:
            $ref: '#/components/schemas/MenuItemStructureDTOv1'
        themeImportData:
          allOf:
          - $ref: '#/components/schemas/ThemeDTOv1'
          - description: Optional theme to be imported and assigned to the portal
    LayoutAndThemeDTO:
      type: object
      properties:
        menuMode:
          allOf:
          - $ref: '#/components/schemas/MenuMode'
          - description: defines a view mode of the menu like e.g. horizontal representation
        colorScheme:
          allOf:
          - $ref: '#/components/schemas/ColorScheme'
          - description: defines a color scheme like dark or light
    LayoutAndThemeDTOv1:
      type: object
      properties:
        menuMode:
          allOf:
          - $ref: '#/components/schemas/MenuModeV1'
          - description: defines a view mode of the menu like e.g. horizontal representation
        colorScheme:
          allOf:
          - $ref: '#/components/schemas/ColorSchemeV1'
          - description: defines a color scheme like dark or light
    LocaleAndTimeSettingsDTO:
      type: object
      properties:
        locale:
          description: ""
          type: string
          example: de-DE
        timezone:
          description: ""
          type: string
          example: Europe/Bratislava
    LocaleAndTimeSettingsDTOv1:
      type: object
      properties:
        locale:
          description: ""
          type: string
          example: de-DE
        timezone:
          description: ""
          type: string
          example: Europe/Bratislava
    MembershipDTO:
      type: object
      properties:
        application:
          type: string
        roleMemberships:
          type: array
          items:
            $ref: '#/components/schemas/MembershipRolesDTO'
    MembershipRolesDTO:
      type: object
      properties:
        role:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionDTO'
    MenuItemDetailsDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            type: string
    MenuItemListDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            type: string
    MenuItemStructureDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemStructureDTO'
        roles:
          type: array
          items:
            type: string
    MenuItemStructureDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemStructureDTOv1'
        roles:
          type: array
          items:
            type: string
    MenuItemStructureDtoLegacy:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalId:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        portalExit:
          type: boolean
        parentItemId:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        i18n:
          type: object
          additionalProperties:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemStructureDtoLegacy'
        parentKey:
          type: string
    MenuMode:
      enum:
      - STATIC
      - HORIZONTAL
      - OVERLAY
      - SLIM
      - SLIMPLUS
      type: string
    MenuModeV1:
      enum:
      - STATIC
      - HORIZONTAL
      - OVERLAY
      - SLIM
      - SLIMPLUS
      type: string
    MenuStructureListDTO:
      type: object
      properties:
        menuItemStructureDTOS:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemStructureDTO'
    MicrofrontendDTOv1:
      required:
      - remoteEntry
      - remoteName
      - exposedModule
      - displayName
      - moduleType
      - remoteBaseUrl
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        remoteEntry:
          minLength: 2
          type: string
        remoteName:
          minLength: 2
          type: string
        exposedModule:
          minLength: 2
          type: string
        displayName:
          minLength: 2
          type: string
        moduleType:
          allOf:
          - $ref: '#/components/schemas/ModuleTypeV1'
          - minLength: 2
        wcTagName:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        note:
          type: string
        contact:
          type: string
        remoteBaseUrl:
          minLength: 2
          type: string
        portals:
          type: array
          items:
            $ref: '#/components/schemas/PortalIdentifierDTOv1'
    MicrofrontendRegistrationDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        mfeId:
          type: string
        baseUrl:
          type: string
        appId:
          type: string
    MicrofrontendRegistrationDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        mfeId:
          type: string
        baseUrl:
          type: string
    MicrofrontendRegistrationInputDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        mfeId:
          type: string
        baseUrl:
          type: string
    MicrofrontendRegistrationRequestDTO:
      type: object
      properties:
        mfeId:
          type: string
        baseUrl:
          type: string
    ModuleTypeV1:
      enum:
      - ANGULAR
      - WEBCOMPONENT
      type: string
    NotificationSettingsDTO:
      type: object
    NotificationSettingsDTOv1:
      type: object
    OffsetDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50-04:00
    PermissionDTO:
      type: object
      properties:
        resource:
          type: string
        action:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
    PortalAddressDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        street:
          type: string
        streetNo:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
    PortalAddressDTOv1:
      type: object
      properties:
        street:
          type: string
        streetNo:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
    PortalDTO:
      required:
      - portalName
      - themeName
      - themeId
      - baseUrl
      type: object
      properties:
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        portalName:
          type: string
        tenantId:
          type: string
        description:
          type: string
        themeName:
          type: string
        themeId:
          type: string
        homePage:
          type: string
        baseUrl:
          pattern: ^/.*
          type: string
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddressDTO'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SubjectLinkDTO'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistrationDTO'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          items:
            type: string
        logoUrl:
          type: string
        version:
          format: int32
          type: integer
    PortalDTOv1:
      required:
      - portalName
      - themeName
      - themeId
      - baseUrl
      type: object
      properties:
        id:
          type: string
        portalName:
          minLength: 2
          type: string
        tenantId:
          type: string
        description:
          type: string
        themeName:
          minLength: 2
          type: string
        themeId:
          minLength: 2
          type: string
        homePage:
          type: string
        baseUrl:
          minLength: 2
          pattern: ^/.*
          type: string
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddressDTOv1'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SubjectLinkDTOv1'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistrationDTOv1'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          items:
            type: string
        logoUrl:
          type: string
        version:
          format: int32
          type: integer
    PortalIdentifierDTO:
      type: object
      properties:
        portalName:
          type: string
        portalId:
          type: string
        tenantId:
          type: string
    PortalIdentifierDTOv1:
      type: object
      properties:
        portalName:
          type: string
        tenantId:
          type: string
    PortalImportDTOv1:
      description: Portal data to be imported
      required:
      - portalName
      type: object
      properties:
        portalName:
          description: Name of the portal that should be created/updated
          minLength: 1
          type: string
        tenantId:
          description: "TenantId which will be set to Portal, when superAdmin Role\
            \ is assigned"
          type: string
        themeName:
          description: Theme name provided in a case when themeImportData is empty
          type: string
        description:
          type: string
        homePage:
          type: string
        baseUrl:
          type: string
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddressDTOv1'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          maxItems: 3
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SubjectLinkDTOv1'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistrationDTOv1'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          items:
            type: string
        logoUrl:
          type: string
    PortalMenuItemDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        scope:
          $ref: '#/components/schemas/Scope'
        position:
          format: int32
          type: integer
        badge:
          type: string
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/PortalMenuItemDTO'
        roles:
          type: array
          items:
            type: string
    PortalMenuItemDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        portalName:
          type: string
        scope:
          $ref: '#/components/schemas/ScopeV1'
        position:
          format: int32
          type: integer
        badge:
          type: string
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/PortalMenuItemDTOv1'
        roles:
          type: array
          items:
            type: string
    PortalSearchCriteriaDTO:
      description: SearchCriteria DTO for Portals
      type: object
      properties:
        portalName:
          type: string
        themeName:
          type: string
    PreferencesDTO:
      type: object
      properties:
        key:
          description: name of preference
          type: string
        value:
          description: value of preference
          type: string
    PreferencesDTOv1:
      description: DTO representation of one key-value preference of user profile
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        userId:
          description: user id of preference
          type: string
        applicationId:
          description: application id of preference
          type: string
        name:
          description: name of preference
          type: string
        description:
          description: description of preference
          type: string
        value:
          description: value of preference
          type: string
    PrivacySettingsDTO:
      type: object
      properties:
        hideMyProfile:
          description: Flag whether profile should be hidden or not
          type: boolean
    PrivacySettingsDTOv1:
      type: object
      properties:
        hideMyProfile:
          description: Flag whether profile should be hidden or not
          type: boolean
    ResetPasswordDTOv1:
      type: object
      properties:
        password:
          type: string
    RestException:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        errorCode:
          type: object
        parameters:
          type: array
          items:
            type: object
        namedParameters:
          type: object
          additionalProperties:
            type: object
    RestExceptionDTO:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        parameters:
          type: array
          items:
            type: object
        namedParameters:
          type: object
          additionalProperties:
            type: object
    Scope:
      enum:
      - WORKSPACE
      - APP
      - PAGE
      type: string
    ScopeV1:
      enum:
      - WORKSPACE
      - APP
      - PAGE
      type: string
    SearchItemDTOv1:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SearchItemTypeV1'
        applicationId:
          type: string
        portalName:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        badge:
          type: string
        disabled:
          type: boolean
    SearchItemTypeV1:
      enum:
      - APPLICATION
      type: string
    SearchTemplateDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        user:
          type: string
        global:
          type: boolean
        application:
          type: string
        page:
          type: string
        name:
          type: string
        defaultTemplate:
          type: boolean
        apiVersion:
          type: string
        criteriaAsJson:
          type: string
    SearchTemplateSearchCriteria:
      type: object
      properties:
        user:
          type: string
        application:
          type: string
        page:
          type: string
        includeGlobal:
          type: boolean
    Status:
      enum:
      - OK
      - CREATED
      - ACCEPTED
      - NO_CONTENT
      - RESET_CONTENT
      - PARTIAL_CONTENT
      - MOVED_PERMANENTLY
      - FOUND
      - SEE_OTHER
      - NOT_MODIFIED
      - USE_PROXY
      - TEMPORARY_REDIRECT
      - BAD_REQUEST
      - UNAUTHORIZED
      - PAYMENT_REQUIRED
      - FORBIDDEN
      - NOT_FOUND
      - METHOD_NOT_ALLOWED
      - NOT_ACCEPTABLE
      - PROXY_AUTHENTICATION_REQUIRED
      - REQUEST_TIMEOUT
      - CONFLICT
      - GONE
      - LENGTH_REQUIRED
      - PRECONDITION_FAILED
      - REQUEST_ENTITY_TOO_LARGE
      - REQUEST_URI_TOO_LONG
      - UNSUPPORTED_MEDIA_TYPE
      - REQUESTED_RANGE_NOT_SATISFIABLE
      - EXPECTATION_FAILED
      - PRECONDITION_REQUIRED
      - TOO_MANY_REQUESTS
      - REQUEST_HEADER_FIELDS_TOO_LARGE
      - INTERNAL_SERVER_ERROR
      - NOT_IMPLEMENTED
      - BAD_GATEWAY
      - SERVICE_UNAVAILABLE
      - GATEWAY_TIMEOUT
      - HTTP_VERSION_NOT_SUPPORTED
      - NETWORK_AUTHENTICATION_REQUIRED
      type: string
    SubjectLinkDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        label:
          type: string
        url:
          type: string
    SubjectLinkDTOv1:
      type: object
      properties:
        label:
          type: string
        url:
          type: string
    SupportTicketDTOv1:
      type: object
      properties:
        processId:
          type: string
        processStep:
          type: string
        source:
          type: string
        sourceDeepLink:
          type: string
    ThemeDTO:
      required:
      - name
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        name:
          minLength: 2
          type: string
        cssFile:
          type: string
        description:
          type: string
        assetsUrl:
          type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        previewImageUrl:
          type: string
        assetsUpdateDate:
          type: string
        properties:
          type: object
        portals:
          type: array
          items:
            $ref: '#/components/schemas/PortalIdentifierDTO'
    ThemeDTOv1:
      required:
      - name
      type: object
      properties:
        id:
          type: string
        version:
          format: int32
          type: integer
        name:
          minLength: 2
          type: string
        cssFile:
          type: string
        description:
          type: string
        assetsUrl:
          type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        previewImageUrl:
          type: string
        assetsUpdateDate:
          type: string
        properties:
          type: object
    UpdateMicrofrontendDTOv1:
      required:
      - remoteEntry
      - remoteName
      - exposedModule
      - displayName
      - moduleType
      - remoteBaseUrl
      type: object
      properties:
        remoteEntry:
          minLength: 2
          type: string
        remoteName:
          minLength: 2
          type: string
        exposedModule:
          minLength: 2
          type: string
        displayName:
          minLength: 2
          type: string
        moduleType:
          allOf:
          - $ref: '#/components/schemas/ModuleTypeV1'
          - minLength: 2
        wcTagName:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        note:
          type: string
        contact:
          type: string
        remoteBaseUrl:
          minLength: 2
          type: string
    UpdatePortalDTO:
      required:
      - portalName
      - themeName
      - themeId
      - baseUrl
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        portalName:
          minLength: 2
          type: string
        tenantId:
          type: string
        description:
          type: string
        themeName:
          minLength: 2
          type: string
        themeId:
          minLength: 2
          type: string
        homePage:
          type: string
        baseUrl:
          minLength: 2
          type: string
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddressDTO'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SubjectLinkDTO'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistrationInputDTO'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          items:
            type: string
        logoUrl:
          type: string
    UpdateThemeDTO:
      required:
      - name
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        name:
          minLength: 2
          type: string
        cssFile:
          type: string
        description:
          type: string
        assetsUrl:
          type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        previewImageUrl:
          type: string
        assetsUpdateDate:
          type: string
        properties:
          type: object
        portals:
          type: array
          items:
            $ref: '#/components/schemas/PortalIdentifierDTO'
    UserInfoDTOv1:
      type: object
      properties:
        familyName:
          type: string
        fullName:
          type: string
        givenName:
          type: string
        userId:
          type: string
    UserPersonAddressDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        street:
          type: string
        streetNo:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
    UserPersonAddressDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        street:
          type: string
        streetNo:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
    UserPersonDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/UserPersonAddressDTO'
        phone:
          $ref: '#/components/schemas/UserPersonPhoneDTO'
    UserPersonDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/UserPersonAddressDTOv1'
        phone:
          $ref: '#/components/schemas/UserPersonPhoneDTOv1'
    UserPersonPhoneDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        type:
          type: string
        number:
          type: string
    UserPersonPhoneDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        type:
          type: string
        number:
          type: string
    UserProfileDTO:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        userId:
          description: ""
          type: string
          example: joe@acme.com
        identityProvider:
          type: string
          example: Keycloak
        identityProviderId:
          description: "user id in external identity provider, e.g. in keycloak"
          type: string
        organization:
          description: ""
          type: string
          example: Acme org IT dept
        person:
          $ref: '#/components/schemas/UserPersonDTO'
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/MembershipDTO'
        accountSettings:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsDTO'
          - description: user account settings
    UserProfileDTOv1:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        userId:
          description: ""
          type: string
          example: joe@acme.com
        identityProvider:
          type: string
          example: Keycloak
        identityProviderId:
          description: "user id in external identity provider, e.g. in keycloak"
          type: string
        organization:
          description: ""
          type: string
          example: Acme org IT dept
        person:
          $ref: '#/components/schemas/UserPersonDTOv1'
        accountSettings:
          allOf:
          - $ref: '#/components/schemas/AccountSettingsDTOv1'
          - description: user account settings
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
        avatar:
          allOf:
          - $ref: '#/components/schemas/ImageInfoDTOv1'
          - description: Avatar related data
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/MembershipDTO'
