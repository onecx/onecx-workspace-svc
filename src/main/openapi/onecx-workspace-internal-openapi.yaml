---
openapi: 3.0.3
info:
  title: onecx-workspace internal service
  version: 1.0.0
servers:
  - url: "http://onecx-workspace:8080"
tags:
  - name: workspaceInternal
  - name: menuInternal
  - name: productInternal
  - name: roleInternal
  - name: assignmentInternal
paths:
  /internal/workspaces/search:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - workspaceInternal
      description: Search for workspaces by search criteria
      operationId: searchWorkspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceSearchCriteria'
      responses:
        "200":
          description: Corresponding workspaces
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspacePageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/workspaces:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - workspaceInternal
      description: Create new workspace
      operationId: createWorkspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
      responses:
        "201":
          description: New workspace created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/workspaces/search/{name}:
    get:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - workspaceInternal
      description: Return workspace by name
      operationId: findWorkspaceByName
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceAbstract'
        "404":
          description: Not found
  /internal/workspaces/{id}:
    get:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - workspaceInternal
      description: Return workspace by id
      operationId: getWorkspace
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        "404":
          description: Not found
    put:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - workspaceInternal
      description: Update workspace by ID
      operationId: updateWorkspace
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
      responses:
        200:
          description: Workspaces updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Workspace not found
    delete:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:delete ]
      tags:
        - workspaceInternal
      description: Delete workspace by ID
      operationId: deleteWorkspace
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "204":
          description: No Content
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/menuItems/workspace/{id}:
    delete:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:delete ]
      tags:
        - menuInternal
      description: Delete all menu items in workspace
      operationId: deleteAllMenuItemsForWorkspace
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "204":
          description: No content
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/slots:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - slotInternal
      description: Add a new slot to workspace
      operationId: createSlot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSlotRequest'
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slot'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/slots/workspace/{id}:
    get:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - slotInternal
      description: Get slots for workspace
      operationId: getSlotsForWorkspace
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: Corresponding menu items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceSlots'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/slots/{id}:
    get:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - slotInternal
      description: Retrieve slot detail info
      operationId: getSlotById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        "404":
          description: Not found
    delete:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:delete ]
      tags:
        - slotInternal
      description: Delete a slot
      operationId: deleteSlotById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "204":
          description: OK
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    put:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - slotInternal
      description: Update an existing slot
      operationId: updateSlot
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSlotRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Menu item not found
  /internal/menuItems:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - menuInternal
      description: Add a new menu item to workspace menu
      operationId: createMenuItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMenuItem'
      responses:
        "201":
          description: OK
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/menuItems/search:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - menuInternal
      description: Search for menu items by search criteria
      operationId: searchMenuItemsByCriteria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemSearchCriteria'
      responses:
        "200":
          description: Corresponding menu items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItemPageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/menuItems/tree:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - menuInternal
      description: Fetch the menuItems of the workspace in the tree structure
      operationId: getMenuStructure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuStructureSearchCriteria'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItemStructure'
        "404":
          description: Not found
  /internal/menuItems/{menuItemId}:
    get:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - menuInternal
      description: Retrieve menu item detail info
      operationId: getMenuItemById
      parameters:
        - $ref: '#/components/parameters/menuItemId'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        "404":
          description: Not found
    delete:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:delete ]
      tags:
        - menuInternal
      description: Delete a menuItem by the workspace id and the menuItemId
      operationId: deleteMenuItemById
      parameters:
        - $ref: '#/components/parameters/menuItemId'
      responses:
        "204":
          description: OK
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    put:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - menuInternal
      description: Update an existing menu item
      operationId: updateMenuItem
      parameters:
        - $ref: '#/components/parameters/menuItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMenuItemRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Menu item not found
  /internal/menuItems/{menuItemId}/parentItemId:
    put:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - menuInternal
      description: Update an existing menu item parent
      operationId: updateMenuItemParent
      parameters:
        - $ref: '#/components/parameters/menuItemId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMenuItemParentRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Menu item not found
  /internal/products:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - productInternal
      description: Create/Register new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        "201":
          description: Product added
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/products/search:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - productInternal
      description: Search for products by search criteria
      operationId: searchProducts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSearchCriteria'
      responses:
        "200":
          description: Corresponding assignments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/products/{productId}:
    get:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - productInternal
      description: Get a product by the productId
      operationId: getProductById
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        200:
          description: Corresponding product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
    delete:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:delete ]
      tags:
        - productInternal
      description: Delete a product by the productId
      operationId: deleteProductById
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        "204":
          description: OK
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    put:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - productInternal
      description: Update product and MFEs
      operationId: updateProductById
      parameters:
        - $ref: '#/components/parameters/productId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Product not found
  /internal/roles/search:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - roleInternal
      description: Search for roles by search criteria
      operationId: searchRoles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleSearchCriteria'
      responses:
        "200":
          description: Corresponding assignments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolePageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/roles:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - roleInternal
      description: Create new role
      operationId: createRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        "201":
          description: New role created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/roles/{roleId}:
    get:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - roleInternal
      description: Retrieve workspace role
      operationId: getWorkspaceRole
      parameters:
        - $ref: '#/components/parameters/roleId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: Role not found
    put:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - roleInternal
      description: Update workspace role
      operationId: updateWorkspaceRole
      parameters:
        - $ref: '#/components/parameters/roleId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        404:
          description: Workspace role not found
    delete:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:delete ]
      tags:
        - roleInternal
      description: Delete workspace role by ID
      operationId: deleteWorkspaceRole
      parameters:
        - $ref: '#/components/parameters/roleId'
      responses:
        204:
          description: No Content
        400:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/assignments/search:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - assignmentInternal
      description: Search for assignments by search criteria
      operationId: searchAssignments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentSearchCriteria'
      responses:
        "200":
          description: Corresponding assignments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentPageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/assignments:
    post:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:write ]
      tags:
        - assignmentInternal
      description: Create new Assignment
      operationId: createAssignment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssignmentRequest'
      responses:
        "201":
          description: New workspace created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/assignments/{assignmentId}:
    get:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:read ]
      tags:
        - assignmentInternal
      description: Get assignment
      operationId: getAssignment
      parameters:
        - $ref: '#/components/parameters/assignmentId'
      responses:
        200:
          description: Get assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        404:
          description: Assignment not found
    delete:
      security:
        - oauth2: [ ocx-ws:all, ocx-ws:delete ]
      tags:
        - assignmentInternal
      description: Delete assignment
      operationId: deleteAssignment
      parameters:
        - $ref: '#/components/parameters/assignmentId'
      responses:
        204:
          description: Assignment deleted
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://oauth.simple.api/token
          scopes:
            ocx-ws:all: Grants access to all operations
            ocx-ws:read: Grants read access
            ocx-ws:write: Grants write access
            ocx-ws:delete: Grants access to delete operations
  schemas:
    MenuStructureSearchCriteria:
      type: object
      required:
        - workspaceId
      properties:
        workspaceId:
          type: string
    MenuItemSearchCriteria:
      type: object
      properties:
        workspaceId:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    MenuItemPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemResult'
    ProductSearchCriteria:
      type: object
      properties:
        workspaceId:
          type: string
        productName:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    ProductPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/ProductResult'
    ProductResult:
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        productName:
          type: string
        baseUrl:
          type: string
        microfrontends:
          type: array
          items:
            $ref: '#/components/schemas/Microfrontend'
    RoleSearchCriteria:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        workspaceId:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    AssignmentSearchCriteria:
      type: object
      properties:
        workspaceId:
          type: string
        menuItemId:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    AssignmentPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
    CreateRoleRequest:
      type: object
      required:
        - workspaceId
      properties:
        workspaceId:
          type: string
        name:
          type: string
        description:
          type: string
    UpdateRoleRequest:
      type: object
      required:
        - modificationCount
      properties:
        name:
          type: string
        description:
          type: string
        modificationCount:
          format: int32
          type: integer
    RolePageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        id:
          type: string
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        name:
          type: string
        description:
          type: string
    CreateAssignmentRequest:
      type: object
      required:
        - roleId
        - menuItemId
      properties:
        roleId:
          type: string
        menuItemId:
          type: string
    Assignment:
      type: object
      properties:
        id:
          type: string
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        roleId:
          type: string
        menuItemId:
          type: string
        workspaceId:
          type: string
    WorkspaceSearchCriteria:
      type: object
      properties:
        name:
          type: string
        themeName:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    WorkspacePageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceAbstract'
    CreateWorkspaceRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        theme:
          type: string
        homePage:
          type: string
        baseUrl:
          type: string
        companyName:
          type: string
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        logoUrl:
          type: string
        address:
          $ref: '#/components/schemas/WorkspaceAddress'
    UpdateWorkspaceRequest:
      required:
        - name
        - modificationCount
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        name:
          type: string
        description:
          type: string
        theme:
          type: string
        homePage:
          type: string
        baseUrl:
          type: string
        companyName:
          type: string
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        logoUrl:
          type: string
        address:
          $ref: '#/components/schemas/WorkspaceAddress'
    Workspace:
      required:
        - name
      type: object
      properties:
        id:
          type: string
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        name:
          type: string
        description:
          type: string
        theme:
          type: string
        homePage:
          type: string
        baseUrl:
          type: string
        companyName:
          type: string
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        logoUrl:
          type: string
        address:
          $ref: '#/components/schemas/WorkspaceAddress'
        mandatory:
          type: boolean
        operator:
          type: boolean
    WorkspaceAbstract:
      required:
        - name
        - id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        theme:
          type: string
        baseUrl:
          type: string
        logoUrl:
          type: string
    WorkspaceAddress:
      type: object
      properties:
        street:
          type: string
        streetNo:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
    SubjectLink:
      type: object
      properties:
        label:
          type: string
        url:
          type: string
    MenuItemStructure:
      type: object
      required:
        - menuItems
        - workspaceId
      properties:
        workspaceId:
          type: string
        menuItems:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/WorkspaceMenuItem'
    WorkspaceMenuItem:
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        external:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceMenuItem'
    UpdateMenuItemParentRequest:
      type: object
      required:
        - modificationCount
        - position
      properties:
        modificationCount:
          format: int32
          type: integer
        position:
          minimum: 0
          format: int32
          type: integer
        parentItemId:
          type: string
    UpdateMenuItemRequest:
      type: object
      required:
        - modificationCount
        - position
      properties:
        modificationCount:
          format: int32
          type: integer
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          minimum: 0
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        external:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
    MenuItemResult:
      type: object
      required:
        - modificationCount
      properties:
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        external:
          type: boolean
        parentItemId:
          type: string
    MenuItem:
      type: object
      required:
        - modificationCount
      properties:
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        external:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
    CreateSlotRequest:
      type: object
      required:
        - workspaceId
        - name
      properties:
        workspaceId:
          type: string
        slots:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CreateSlot'
    CreateSlot:
      type: object
      properties:
        name:
          type: string
    UpdateSlotRequest:
      type: object
      required:
        - modificationCount
        - name
      properties:
        modificationCount:
          format: int32
          type: integer
        name:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/SlotComponent'
    Slot:
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        workspaceId:
          type: string
        name:
          type: string
        components:
          type: array
          items:
            $ref: '#/components/schemas/SlotComponent'
    SlotComponent:
      type: object
      required:
        - productName
        - appId
        - name
      properties:
        productName:
          type: string
        appId:
          type: string
        name:
          type: string
    WorkspaceSlots:
      type: object
      properties:
        slots:
          type: array
          items:
            $ref: '#/components/schemas/Slot'
    CreateMenuItem:
      type: object
      required:
        - workspaceId
      properties:
        workspaceId:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        external:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
    Scope:
      enum:
        - WORKSPACE
        - APP
        - PAGE
      type: string
    ProblemDetailResponse:
      type: object
      properties:
        errorCode:
          type: string
        detail:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailParam'
        invalidParams:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailInvalidParam'
    ProblemDetailParam:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ProblemDetailInvalidParam:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    OffsetDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50-04:00
    CreateProductRequest:
      required:
        - productName
        - baseUrl
        - workspaceId
      type: object
      properties:
        workspaceId:
          type: string
        productName:
          type: string
        baseUrl:
          type: string
        microfrontends:
          type: array
          items:
            $ref: '#/components/schemas/CreateMicrofrontend'
    CreateMicrofrontend:
      required:
        - mfeId
        - basePath
      type: object
      properties:
        mfeId:
          type: string
        basePath:
          type: string
    UpdateProductRequest:
      required:
        - baseUrl
        - modificationCount
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        baseUrl:
          type: string
        microfrontends:
          type: array
          items:
            $ref: '#/components/schemas/UpdateMicrofrontend'
    UpdateMicrofrontend:
      required:
        - mfeId
        - basePath
      type: object
      properties:
        mfeId:
          type: string
        basePath:
          type: string
    Product:
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        productName:
          type: string
        baseUrl:
          type: string
        microfrontends:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Microfrontend'
    Microfrontend:
      type: object
      properties:
        id:
          type: string
        mfeId:
          type: string
        basePath:
          type: string
  parameters:
    assignmentId:
      in: path
      name: assignmentId
      required: true
      schema:
        type: string
    roleId:
      in: path
      name: roleId
      required: true
      schema:
        type: string
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
    name:
      in: path
      name: name
      required: true
      schema:
        type: string
    menuItemId:
      in: path
      name: menuItemId
      required: true
      schema:
        type: string
    productId:
      in: path
      name: productId
      required: true
      schema:
        type: string