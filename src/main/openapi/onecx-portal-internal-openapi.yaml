---
openapi: 3.0.3
info:
  title: onecx-portal internal service
  version: 1.0.0
servers:
  - url: "http://onecx-portal:8080"
tags:
  - name: themesInternal
  - name: microfrontendRegistrationInternal
  - name: portalInternal
  - name: menuItemsInternal
  - name: microfrontendInternal
paths:
  /internal/microfrontends:
    get:
      tags:
        - microfrontendInternal
      description: Returns a list of all micro-frontends.
      operationId: getMicrofrontends
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Microfrontend'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    post:
      tags:
        - microfrontendInternal
      description: Create microfrontend.
      operationId: createNewMicroFrontend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMicrofrontend'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microfrontend'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/microfrontends/{id}:
    get:
      tags:
        - microfrontendInternal
      description: Returns a microfrontend by ID.
      operationId: getMicrofrontendById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Microfrontend'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    put:
      tags:
        - microfrontendInternal
      description: Creates or updates a microfrontend.
      operationId: updateMicrofrontend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMicrofrontend'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microfrontend'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
        - microfrontendInternal
      description: Delete microfrontend by ID when no portals are attached.
      operationId: deleteMicrofrontend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Microfrontend'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals:
    get:
      tags:
        - portalInternal
      description: Load all portals
      operationId: getAllPortals
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portal'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    post:
      tags:
        - portalInternal
      description: Create new portal definition
      operationId: createNewPortal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortal'
      responses:
        "201":
          description: OK
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/search:
    get:
      tags:
        - portalInternal
      summary: Get portals by search criteria (name & theme)
      description: This operation searches portals by criteria.
      operationId: getPortals
      parameters:
        - name: portalName
          in: path
          schema:
            type: string
        - name: themeName
          in: path
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portal'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  /internal/portals/{portalId}:
    get:
      tags:
        - portalInternal
      description: Load a single portal
      operationId: getPortalByPortalId
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portal'
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    put:
      tags:
        - portalInternal
      description: Update portal definition
      operationId: updatePortal
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePortal'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portal'
        "400":
          description: Bad request
          content:
            application/json: {}
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
        - portalInternal
      description: Delete given portal
      operationId: deletePortal
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portal'
        "204":
          description: No Content
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/menuItems:
    patch:
      tags:
        - menuItemsInternal
      description: Bulk update menu Items
      operationId: bulkPatchMenuItems
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/MenuItemDetails'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItemList'
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    get:
      tags:
        - menuItemsInternal
      description: Returns a list of portal menu items
      operationId: getPortalMenuItems
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItemList'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    post:
      tags:
        - menuItemsInternal
      description: Add a new menu item to portal menu
      operationId: addMenuItemForPortal
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemDetails'
      responses:
        "201":
          description: OK
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
        - menuItemsInternal
      description: Delete all menu items in portal
      operationId: deleteAllMenuItemForPortal
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/menuItems/tree:
    get:
      tags:
        - menuItemsInternal
      description: Fetch the menuItems of the portal in the tree structure
      operationId: getMenuStructureForPortalId
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PortalMenuItem'
        "401":
          description: Not authorized
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/menuItems/upload:
    put:
      tags:
        - menuItemsInternal
      description: Upload and overwrite menuStructure in portal
      operationId: uploadMenuStructure
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuStructureList'
      responses:
        "204":
          description: OK
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "404":
          description: Portal not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/menuItems/{menuItemId}:
    get:
      tags:
        - menuItemsInternal
      description: Retrieve menu item detail info
      operationId: getMenuItemById
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
        - name: menuItemId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItemDetails'
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
        - menuItemsInternal
      description: Delete a menuItem by the PortalId and the menuItemId
      operationId: deleteMenuItemById
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
        - name: menuItemId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    patch:
      tags:
        - menuItemsInternal
      description: Update an existing menu item
      operationId: patchMenuItem
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
        - name: menuItemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemDetails'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItemDetails'
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/microfrontendregistrations:
    post:
      tags:
        - microfrontendRegistrationInternal
      description: Assigns a microfrontend to this portal
      operationId: registerMicrofrontend
      parameters:
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MicrofrontendRegistrationRequest'
      responses:
        "201":
          description: Registrations for the portal created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "404":
          description: Portal resource not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/portals/{portalId}/microfrontendregistrations/{mfeRegId}:
    get:
      tags:
        - microfrontendRegistrationInternal
      description: Return microfrontend registration
      operationId: getMicrofrontend
      parameters:
        - name: mfeRegId
          in: path
          required: true
          schema:
            type: string
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get microfrontend registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MicrofrontendRegistration'
        "404":
          description: Portal resource not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
        - microfrontendRegistrationInternal
      description: Removes microfrontend assignment to this portal
      operationId: deleteMicrofrontendRegistration
      parameters:
        - name: mfeRegId
          in: path
          required: true
          schema:
            type: string
        - name: portalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Micro-frontend registraction deleted from portal
        "403":
          description: Forbidden
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/themes:
    get:
      tags:
        - themesInternal
      description: Return list of themes
      operationId: getThemes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Theme'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    post:
      tags:
        - themesInternal
      description: Create new theme
      operationId: createNewTheme
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTheme'
      responses:
        "201":
          description: Created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/themes/{id}:
    get:
      tags:
        - themesInternal
      description: Return theme by ID
      operationId: getThemeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    put:
      tags:
        - themesInternal
      description: Update theme by ID
      operationId: updateTheme
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTheme'
      responses:
        "201":
          description: New theme created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
        "204":
          description: Existing theme updated
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
    delete:
      tags:
        - themesInternal
      description: Delete theme by ID
      operationId: deleteTheme
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        "204":
          description: No Content
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
  /internal/themes/name/{name}:
    get:
      tags:
        - themesInternal
      description: Load a single theme definition
      operationId: getThemeByThemeDefinitionName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Theme'
        "403":
          description: Forbidden
        "404":
          description: Not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestException'
      deprecated: true
components:
  schemas:
    ColorScheme:
      enum:
        - AUTO
        - LIGHT
        - DARK
      type: string
    CreateMicrofrontend:
      required:
        - remoteEntry
        - remoteName
        - exposedModule
        - displayName
        - moduleType
        - remoteBaseUrl
      type: object
      properties:
        remoteEntry:
          minLength: 2
          type: string
        remoteName:
          minLength: 2
          type: string
        exposedModule:
          minLength: 2
          type: string
        displayName:
          minLength: 2
          type: string
        moduleType:
          $ref: '#/components/schemas/ModuleType'
        wcTagName:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        note:
          type: string
        contact:
          type: string
        remoteBaseUrl:
          minLength: 2
          type: string
    CreatePortal:
      required:
        - portalName
        - themeName
        - baseUrl
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        portalName:
          minLength: 2
          type: string
        description:
          type: string
        themeName:
          nullable: false
          minLength: 2
          type: string
        themeId:
          type: string
        homePage:
          type: string
        baseUrl:
          minLength: 2
          type: string
          nullable: false
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddress'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          uniqueItems: true
          maxItems: 3
          type: array
          items:
            $ref: '#/components/schemas/SubjectLink'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistrationInput'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          uniqueItems: true
          items:
            type: string
        logoUrl:
          type: string
    CreateTheme:
      required:
        - name
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        name:
          minLength: 2
          type: string
        cssFile:
          type: string
        description:
          type: string
        assetsUrl:
          type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        previewImageUrl:
          type: string
        assetsUpdateDate:
          type: string
        properties:
          type: object
        portals:
          type: array
          items:
            $ref: '#/components/schemas/PortalIdentifier'
    ImportRequest:
      required:
        - portal
      type: object
      properties:
        synchronizePermissions:
          description: Whether menu permissions should be synced to APM after import
          type: boolean
        portal:
          $ref: '#/components/schemas/PortalImport'
        menuItems:
          description: Menu Items structure imported with a portal
          type: array
          items:
            $ref: '#/components/schemas/MenuItemStructure'
        themeImportData:
          $ref: '#/components/schemas/Theme'
    LayoutAndTheme:
      type: object
      properties:
        menuMode:
          $ref: '#/components/schemas/MenuMode'
        colorScheme:
          $ref: '#/components/schemas/ColorScheme'
    LocaleAndTimeSettings:
      type: object
      properties:
        locale:
          description: ""
          type: string
          example: de-DE
        timezone:
          description: ""
          type: string
          example: Europe/Bratislava
    Membership:
      type: object
      properties:
        application:
          type: string
        roleMemberships:
          type: array
          items:
            $ref: '#/components/schemas/MembershipRoles'
    MembershipRoles:
      type: object
      properties:
        role:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    MenuItemDetails:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            type: string
    MenuItemList:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            type: string
    MenuItemStructure:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        position:
          format: int32
          type: integer
        badge:
          type: string
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemStructure'
        roles:
          type: array
          items:
            type: string
    MenuMode:
      enum:
        - STATIC
        - HORIZONTAL
        - OVERLAY
        - SLIM
        - SLIMPLUS
      type: string
    MenuStructureList:
      type: object
      required:
        - menuItemStructures
      properties:
        menuItemStructures:
          nullable: false
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/MenuItemStructure'
    Microfrontend:
      required:
        - remoteEntry
        - remoteName
        - exposedModule
        - displayName
        - moduleType
        - remoteBaseUrl
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        remoteEntry:
          minLength: 2
          type: string
        remoteName:
          minLength: 2
          type: string
        exposedModule:
          minLength: 2
          type: string
        displayName:
          minLength: 2
          type: string
        moduleType:
          $ref: '#/components/schemas/ModuleType'
        wcTagName:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        note:
          type: string
        contact:
          type: string
        remoteBaseUrl:
          minLength: 2
          type: string
    MicrofrontendRegistration:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        mfeId:
          type: string
        baseUrl:
          type: string
    MicrofrontendRegistrationInput:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        mfeId:
          type: string
        baseUrl:
          type: string
    MicrofrontendRegistrationRequest:
      type: object
      properties:
        mfeId:
          type: string
        baseUrl:
          type: string
    ModuleType:
      enum:
        - ANGULAR
        - WEBCOMPONENT
      type: string
    NotificationSettings:
      type: object
    OffsetDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50-04:00
    Permission:
      type: object
      properties:
        resource:
          type: string
        action:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
    PortalAddress:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        street:
          type: string
        streetNo:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
    Portal:
      required:
        - portalName
        - themeName
        - themeId
        - baseUrl
      type: object
      properties:
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        portalName:
          type: string
        tenantId:
          type: string
        description:
          type: string
        themeName:
          type: string
        themeId:
          type: string
        homePage:
          type: string
        baseUrl:
          pattern: ^/.*
          type: string
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddress'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SubjectLink'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistration'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          items:
            type: string
        logoUrl:
          type: string
        version:
          format: int32
          type: integer
    PortalIdentifier:
      type: object
      properties:
        portalName:
          type: string
        portalId:
          type: string
        tenantId:
          type: string
    PortalImport:
      description: Portal data to be imported
      required:
        - portalName
      type: object
      properties:
        portalName:
          description: Name of the portal that should be created/updated
          minLength: 1
          type: string
        tenantId:
          description: "TenantId which will be set to Portal, when superAdmin Role\
            \ is assigned"
          type: string
        themeName:
          description: Theme name provided in a case when themeImportData is empty
          type: string
        description:
          type: string
        homePage:
          type: string
        baseUrl:
          type: string
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddress'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          maxItems: 3
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SubjectLink'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistration'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          items:
            type: string
        logoUrl:
          type: string
    PortalMenuItem:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        key:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        portalName:
          type: string
        applicationId:
          type: string
        disabled:
          type: boolean
        scope:
          $ref: '#/components/schemas/Scope'
        position:
          format: int32
          type: integer
        badge:
          type: string
        portalExit:
          type: boolean
        parentItemId:
          type: string
        i18n:
          type: object
          additionalProperties:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/PortalMenuItem'
        roles:
          type: array
          items:
            type: string
    Scope:
      enum:
        - WORKSPACE
        - APP
        - PAGE
      type: string
    SearchItem:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SearchItemType'
        applicationId:
          type: string
        portalName:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        badge:
          type: string
        disabled:
          type: boolean
    SearchItemType:
      enum:
        - APPLICATION
      type: string
    SearchTemplate:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        user:
          type: string
        global:
          type: boolean
        application:
          type: string
        page:
          type: string
        name:
          type: string
        defaultTemplate:
          type: boolean
        apiVersion:
          type: string
        criteriaAsJson:
          type: string
    SearchTemplateSearchCriteria:
      type: object
      properties:
        user:
          type: string
        application:
          type: string
        page:
          type: string
        includeGlobal:
          type: boolean
    SubjectLink:
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        label:
          type: string
        url:
          type: string
    SupportTicket:
      type: object
      properties:
        processId:
          type: string
        processStep:
          type: string
        source:
          type: string
        sourceDeepLink:
          type: string
    Theme:
      required:
        - name
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        name:
          minLength: 2
          type: string
        cssFile:
          type: string
        description:
          type: string
        assetsUrl:
          type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        previewImageUrl:
          type: string
        assetsUpdateDate:
          type: string
        properties:
          type: object
    UpdateMicrofrontend:
      required:
        - remoteEntry
        - remoteName
        - exposedModule
        - displayName
        - moduleType
        - remoteBaseUrl
      type: object
      properties:
        remoteEntry:
          minLength: 2
          type: string
        remoteName:
          minLength: 2
          type: string
        exposedModule:
          minLength: 2
          type: string
        displayName:
          minLength: 2
          type: string
        moduleType:
          $ref: '#/components/schemas/ModuleType'
        wcTagName:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        note:
          type: string
        contact:
          type: string
        remoteBaseUrl:
          minLength: 2
          type: string
    UpdatePortal:
      required:
        - portalName
        - themeName
        - themeId
        - baseUrl
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        portalName:
          minLength: 2
          type: string
        tenantId:
          type: string
        description:
          type: string
        themeName:
          minLength: 2
          type: string
        homePage:
          type: string
        baseUrl:
          minLength: 2
          type: string
        companyName:
          type: string
        address:
          $ref: '#/components/schemas/PortalAddress'
        phoneNumber:
          type: string
        rssFeedUrl:
          type: string
        footerLabel:
          type: string
        subjectLinks:
          uniqueItems: true
          maxItems: 3
          type: array
          items:
            $ref: '#/components/schemas/SubjectLink'
        microfrontendRegistrations:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendRegistrationInput'
        imageUrls:
          uniqueItems: true
          type: array
          items:
            type: string
        portalRoles:
          type: array
          items:
            type: string
        logoUrl:
          type: string
    UpdateTheme:
      required:
        - name
      type: object
      properties:
        version:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        id:
          type: string
        name:
          minLength: 2
          type: string
        cssFile:
          type: string
        description:
          type: string
        assetsUrl:
          type: string
        logoUrl:
          type: string
        faviconUrl:
          type: string
        previewImageUrl:
          type: string
        assetsUpdateDate:
          type: string
        properties:
          type: object
        portals:
          type: array
          items:
            $ref: '#/components/schemas/PortalIdentifier'
    RestException:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        parameters:
          type: array
          items:
            type: object
        namedParameters:
          type: object
          additionalProperties:
            type: object
        validations:
          type: array
          items:
            $ref: '#/components/schemas/ValidationConstraint'
    ValidationConstraint:
      type: object
      properties:
        parameter:
          type: string
        message:
          type: string